<?php


namespace api\controllers;

use api\transformers\CartList;
use api\transformers\LocationList;
use api\transformers\ProfileProductList;
use common\models\City;
use common\models\SellerQuery;
use common\models\Stock;
use common\models\StoreDelivery;
use common\models\StoreProduct;
use common\models\User;
use api\models\ProfileForm;
use common\models\UserCart;
use common\models\UserCommission;
use frontend\widgets\WBasket;
use Yii;
use yii\filters\auth\HttpBasicAuth;
use yii\web\UploadedFile;

class CartController extends \yii\web\Controller
{
    const STATUS_WAIT = 0;
    const STATUS_SEND = 1;
    const STATUS_CANCEL = -1;
    const STATUS_ACCEPTED = 2;

    public $enableCsrfValidation = false;
    public $enableSession = false;

    public function beforeAction($action)
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return parent::beforeAction($action,'delete','clear'); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        return [
            'authenticator' => [
                'class' => HttpBasicAuth::className(),
                'auth' => function ($email, $password) {
                    $user = User::findByEmail($email);
                    if (!$user) return null;
                    $check = $user->validatePassword($password);
                    return $check ? $user: null;
                }
            ]
//            'verbs' => [
//                'class' => VerbFilter::className(),
//                'actions' => [
//                    'purchase-delete' => ['post'],
//                ],
//            ],
        ];
    }

    public function actionIndex()
    {
        $total_count = [];
        $userCart = [];
        $deliveries = StoreDelivery::find()->all();
        $cities = City::find()->where(['status'=>1])->all();
        $user_commission = (!empty(UserCommission::find()->where(['user_id'=>Yii::$app->user->identity->getId()])->one())) ? UserCommission::find()->where(['user_id'=>Yii::$app->user->identity->getId()])->one() : 35;
        $commission = $user_commission->commission;
        $commission = (1 + ($commission ? : 0) / 100);

        if (Yii::$app->user->id) {
            $userCart = UserCart::find()->where(['user_id'=>Yii::$app->user->identity->getId()])->all();
        } elseif (!empty(Yii::$app->session->get('cart'))) {
            $products = Yii::$app->session->get('cart');
            $cart_count = Yii::$app->session->get('cart_count', []);
            foreach ($products as $it => $product) {
                $userCart_temp = new UserCart();
                $userCart_temp->product_id = $product['product_id'];
                $userCart_temp->count = isset($cart_count[$it]['count'])? $cart_count[$it]['count']: 1;
                $userCart[] = $userCart_temp;
            }
        }
        if (!empty($userCart)) {
            for ($i = 0; $i < count($userCart); $i++) {
                $temp_prod = StoreProduct::findOne(['status' => 1, 'id' => $userCart[$i]->product_id]);
                if (empty($temp_prod)) continue;
            }
        }
        if (!empty($userCart)) {
            $total_count = WBasket::widget(['key'=>'main']);

//            $this->render('index',[
//                'cart_products' => $userCart,
//                'total_count' => $total_count,
//                'deliveries' => $deliveries,
//                'cities' => $cities,
//                'commission' => $commission,
//            ]);

            return $this->asJson(['data' => CartList::transform($userCart, $commission),'total_count'=>$total_count]);

        } elseif(empty($userCart)) {
//            return $this->render('index',[
//                'cart_products' => $userCart,
//                'total_count' => $total_count,
//                'cities' => $cities,
//                'deliveries' => $deliveries,
//                'commission' => 35,
//            ]);

            return $this->asJson(['data' => CartList::transform($userCart, $commission), 'total_count'=>$total_count]);
        }
    }

    public function actionAdd()
    {
        if (!empty($prod_id = Yii::$app->request->post('product_id'))) {
            $product = StoreProduct::findOne($prod_id);
            $query = SellerQuery::find()->where(['product_id'=> $prod_id])->one();
            if($query) {
                $user_id = $query->query->user_id;
            }

            if (empty($product)) return $this->asJson(['error' => true]);
            if (Yii::$app->user->id) {
                if (empty(UserCart::findOne(['product_id' => $prod_id, 'user_id' => Yii::$app->user->id]))) {
                    $userCart = new UserCart();
                    $userCart->product_id = $prod_id;
                    $userCart->count = (Yii::$app->request->post('count') > 0)? Yii::$app->request->post('count'): 1;
                    $userCart->user_id = Yii::$app->user->id;
                    $userCart->status = self::STATUS_WAIT;
                    if($userCart->save()) $error = 'false';
                    else $error = 'Not Saved';
                    $total_count = WBasket::widget(['key'=>'main']);

                    return $this->asJson([
                        'error' => $error,
                        'product' => [
                            'page_title' => Yii::t('frontend', 'Product added to cart'),
                            'id' => $product->id,
                            'img' => $product->image,
                            'name' => $product->translate->name,
                            //                        'shop' => $product->shop->name,
                            'cat' => $product->category->translate->title,
                            'cart_count' => static::getCount(),
                        ],
                        'total_count' => $total_count,
                    ]);

                } else {
                    return $this->asJson([
                        'error' => false,
                        'product' => [
                            'page_title' => Yii::t('frontend', 'Product issets in cart'),
                            'img' => $product->image,
                            'id' => $product->id,
                            'name' => $product->translate->name,
                            //                        'shop' => $product->shop->name,
                            'cat' => $product->category->translate->title,
                            'cart_count' => static::getCount(),
                        ],
                    ]);
                }
            } else {
                $cart = !empty(Yii::$app->session->get('cart')) ? Yii::$app->session->get('cart') : [];
                if (isset($cart)) { if (in_array(['product_id' => $prod_id], $cart)) {

                    return $this->asJson([
                        'error' => false,
                        'product' => [
                            'page_title' => Yii::t('frontend', 'Product issets in cart'),
                            'img' => $product->image,
                            'id' => $product->id,
                            'name' => $product->translate->name,
//                                'shop' => $product->shop->name,
                            'cat' => $product->category->translate->title,
                            'cart_count' => static::getCount(),
                        ],
                    ]);
                }
                }
                $index = count($cart);
                $cart[$index]['product_id'] = $prod_id;
                $cart_count[$index]['count'] = (Yii::$app->request->post('count') > 0)? Yii::$app->request->post('count'): 1;
                Yii::$app->session->set('cart', $cart);
                Yii::$app->session->set('cart_count', $cart_count);
                $total_count = WBasket::widget(['key'=>'main']);

                return $this->asJson([
                    'error' => false,
                    'product' => [
                        'page_title' => Yii::t('frontend', 'Product added to cart 1'),
                        'img' => $product->image,
                        'name' => $product->translate->name,
                        //                        'shop' => $product->shop->name,
                        'cat' => $product->category->translate->title,
                        'cart_count' => static::getCount(),
                        'total_count' => $total_count,
                    ],
                ]);
            }
        }
        return $this->asJson(['error' => true,'message'=>'Product does not exist']);
    }

    /* Delte product from UserCart */
    public function actionDelete()
    {
        if (!empty($data = Yii::$app->request->post('cart_product_id'))) {
            $data = explode('_', $data);
            if (!isset($data[0])) return $this->asJson(['error' => true]);
            if (empty($data[0])) return $this->asJson(['error' => true]);

            $product['product_id'] = $data[0];

            if ($user_id = Yii::$app->user->id) {
                $product['user_id'] = $user_id;
                if(!empty($cart = UserCart::findOne(['id'=>$product['product_id']]))) {
                    if ($cart->delete()) {
                        $error = false;
                        $message = 'Product remove from User Cart';
                    }
                    else {
                        $error = true;
                        $message = 'Not possible to remove';
                    }
                } else {
                    $error = true;
                    $message = 'Product not found in Cart';
                }
                return $this->asJson([
                    'error' => $error,
                    'message' => $message,
                    'data'=>$product,
                    'cart_count' => static::getCount()]);
            } else {
                $cart = !empty(Yii::$app->session->get('cart')) ? Yii::$app->session->get('cart') : [];
                if (!empty($cart)) {
                    if (($key = array_search($product, $cart)) !== false) unset($cart[$key]);
                }
                Yii::$app->session->set('cart', array_values($cart));
                return $this->asJson(['error' => false, 'cart_count' => static::getCount()]);
            }
        }
        return $this->asJson(['error' => true,'message'=>'Product ID not found in UserCart']);
    }

    /* Clear Products from User Cart */
    public function actionClear()
    {
        if (Yii::$app->user->identity->getId()) {
            if($cart = UserCart::findAll(['user_id'=>Yii::$app->user->identity->getId()])) {
                if (UserCart::deleteAll(['user_id'=>Yii::$app->user->identity->getId()])) {
                    $error = false;
                    $message = 'Products removed. Cart is empty';
                } else {
                    $error = true;
                    $message = 'Dont delete';
                }
            } else {
                $error = true;
                $message = 'Product not found in Cart';
            }
            return $this->asJson([
                'error' => $error,
                'message' => $message
            ]);
        }
        else {
            $cart = !empty(Yii::$app->session->get('cart')) ? Yii::$app->session->get('cart') : [];
            if (!empty($cart)) {
                if (($key = array_search($product, $cart)) !== false) unset($cart[$key]);
            }
            Yii::$app->session->set('cart', array_values($cart));
            return $this->asJson(['error' => false]);
        }
    }

    /* Get All Active Cities */
    public function actionGetCities()
    {
        $cities = City::find()->where(['status'=>1])->all();

        $city_array = [];

        if($cities) {
            foreach ($cities as $key => $city) {
                $city_array += [$city->id => $city->name];
            }

            return $this->asJson(['data' => LocationList::transform($cities)]);
        }

        return $this->asJson(['error'=>true]);
    }

    public function actionGetStocks($id)
    {
        $stocks = Stock::find()->where(['city_id' => $id])->all();

        $stock_array = [];

//        if (count($stocks)) {
//            foreach ($stocks as $key => $stock) {
//                $stock_array[$stock['city_id']] = $stock['name'];
//            }
//        }

        $data = '<option value="" disabled selected>' . 'Select Location' . '</option>';
        if (count($stocks)) {
            foreach ($stocks as $key => $stock) {
                $data .= '<option value="' . $stock->name . '">' . $stock->name . '</option>';
            }
        }

        return $this->asJson($data);
    }

    public static function getCount() {
        if (Yii::$app->user->id) {
            $count =  UserCart::find()->where(['user_id' => Yii::$app->user->id])->count();
        }
        else{
            $cart = !empty(Yii::$app->session->get('cart')) ? Yii::$app->session->get('cart') : [];
            $count =  (!empty($cart))? count($cart): 0;
        }
        return ($count > 9)? '9+': $count;
    }
}