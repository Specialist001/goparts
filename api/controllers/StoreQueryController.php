<?php

namespace api\controllers;

use api\transformers\StoreCategoryList;
use api\transformers\StoreQueryList;
use common\components\Helper;
use common\components\SimpleImage;
use common\models\SellerQuery;
use common\models\StoreCategory;
use common\models\StoreProduct;
use common\models\StoreProductImage;
use common\models\StoreProductTranslation;
use common\models\User;
use rmrevin\yii\fontawesome\FA;
use Yii;
use yii\filters\auth\HttpBasicAuth;
use yii\web\Controller;
use yii\web\Response;
use yii\web\UploadedFile;

class StoreQueryController extends Controller
{
    public $enableCsrfValidation = false;

    public function beforeAction($action)
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        return [
            'authenticator' => [
                'class' => HttpBasicAuth::className(),
                'auth' => function ($email, $password) {
                    $user = User::findByEmail($email);
                    if (!$user) return null;
                    $check = $user->validatePassword($password);
                    return $check ? $user : null;
                }
            ]
        ];
    }


    public function actionIndex($id = null)
    {
        if (!Yii::$app->user->isGuest) {
            $seller_queries = null;
            if ($id) {
                $seller_queries = SellerQuery::find()->where(['seller_id' => Yii::$app->user->identity->getId(), 'id' => $id])->all();
            } else {
                $seller_queries = SellerQuery::find()->where(['seller_id' => Yii::$app->user->identity->getId()])->andWhere(['<', 'status', 3])->orderBy('`created_at` DESC')->all();
                $get_prices = SellerQuery::find()->where(['query_id' => $seller_query->query_id])->andWhere(['not', ['product_id' => null]])->all();
                $price_array = [];
                foreach ($get_prices as $get_price) {
                    $price_array[] += $get_price->productPrice->price;
                }
                sort($price_array);
                $arrlength = count($price_array);
                if ($arrlength > 3) $counter = 3;
                else $counter = $arrlength;

                //return $this->redirect(['site/error', 'message' => 'Not Found 1', 'code' => 404]);
            }
            if ($seller_queries) {
                return $this->asJson(['data' => StoreQueryList::transform($seller_queries, $counter, $price_array)]);
            } else {
                return $this->redirect(['site/error', 'message' => Yii::$app->user->getId(), 'code' => 404]);
            }
        }
        return $this->asJson(['message' => 'Not Authorized']);
    }

    public function actionCategory($id = null)
    {
        $category = null;
        if ($id) {
            $category = StoreCategory::find()->where(['status' => 1, 'id' => $id])->orderBy('order')->all();
        } else {
            $category = StoreCategory::find()->where(['status' => 1, 'parent_id' => null])->orderBy('order')->all();
        }
        if ($category) {
            return $this->asJson(['data' => StoreCategoryList::transform($category)]);
        } else {
            return $this->redirect(['site/error', 'message' => 'Not Found', 'code' => 404]);
        }

    }

    public function actionAddProduct()
    {
        $post = Yii::$app->request->post();
        $product_data = $post['Product'];
        $query_data = $post['SellerQuery'];
        if ($product_data['description']) {
            if ($product_data['price']) {
                if (!(empty(SellerQuery::find()->where(['query_id' => $query_data['query_id']])->one()))) {
                    if (!(empty(SellerQuery::find()->where(['seller_id' => Yii::$app->user->identity->getId(), 'query_id' => $query_data['query_id'], 'product_id' => null, 'status' => 0])->one()))) {

                        $model = new StoreProduct();

                        $model->car_id = $query_data['car_id'];
                        $model->user_id = Yii::$app->user->identity->getId();

                        $model->save();

                        $image = UploadedFile::getInstanceByName('mainImage');
                        $dir = (__DIR__) . '/../../uploads/store-products/';

                        if ($image) {
                            $image_model = new StoreProductImage();
                            $image_model->product_id = $model->id;
                            $image_model->main = 1;
                            $path = $image->baseName . '.' . $image->extension;
                            if ($image->saveAs($dir . $path)) {
                                $resizer = new SimpleImage();
                                $resizer->load($dir . $path);
                                $resizer->resize(Yii::$app->params['imageSizes']['store-products']['image'][0], Yii::$app->params['imageSizes']['store-products']['image'][1]);
                                $image_name = uniqid() . '.' . $image->extension;
                                $resizer->save($dir . $image_name);
                                $image_model->link = '/uploads/store-products/' . $image_name;
                                if (is_file($dir . $path)) if (file_exists($dir . $path)) unlink($dir . $path);
                                $image_model->save();
                            } else {
                                Yii::$app->session->setFlash('error', FA::i('warning') . ' Ошибка, попробуйте позже.');
                                return $this->goBack();
                            }
                        }

                        $images_json_array = [];
                        $images = UploadedFile::getInstancesByName('Query[images]');
                        if (!empty($images)) {
                            foreach ($images as $key => $image) {
                                $image_model = new StoreProductImage();
                                $image_model->product_id = $model->id;
                                $image_model->main = 0;
                                $path = $image->baseName . '.' . $image->extension;
                                if ($image->saveAs($dir . $path)) {
                                    $resizer = new SimpleImage();
                                    $resizer->load($dir . $path);
                                    $resizer->resize(Yii::$app->params['imageSizes']['store-products']['image'][0], Yii::$app->params['imageSizes']['store-products']['image'][1]);
                                    $image_name = uniqid() . '.' . $image->extension;
                                    $resizer->save($dir . $image_name);
                                    $image_model->link = '/uploads/store-products/' . $image_name;
                                    if (is_file($dir . $path)) if (file_exists($dir . $path)) unlink($dir . $path);

                                    $image_model->save();
                                    $images_json_array += [$key => $image_model->link];
                                } else {
                                    Yii::$app->session->setFlash('error', FA::i('warning') . ' Ошибка, попробуйте позже.');
                                    return $this->goBack();
                                }
                            }
                        } else {
                            $image_model = new StoreProductImage();
                            $image_model->product_id = $model->id;
                            $image_model->main = 0;
                            $image_model->link = '/uploads/site/vectorpaint.png';
                            $image_model->save();
                            $images_json_array += [0 => $image_model->link];
                        }

                        $model->sku = Yii::$app->user->getId() . '-' . date('dmy') . '-' . $model->id;

                        $translation_en = new StoreProductTranslation();
                        $translation_ar = new StoreProductTranslation();
                        $translation_ru = new StoreProductTranslation();

                        $translation_en->product_id = $model->id;
                        $translation_en->name = $product_data['description'] ? mb_substr($product_data['description'], 0, 10) : '';
                        $translation_en->short = $product_data['description'] ? mb_substr($product_data['description'], 0, 20) : '';
                        $translation_en->description = $product_data['description'] ? $product_data['description'] : '';
                        $translation_en->meta_title = $product_data['description'] ? mb_substr($product_data['description'], 0, 10) : '';
                        $translation_en->meta_description = $product_data['description'] ? mb_substr($product_data['description'], 0, 20) : '';
                        $translation_en->meta_keywords = $product_data['description'] ? str_replace(' ', ',', $product_data['description']) : '';
                        $translation_en->locale = 'en-EN';
                        $translation_en->save();

                        $translation_ar->product_id = $model->id;
                        $translation_ar->name = (Yii::$app->request->post('StoreProductTranslation')['name']['ar'] != '') ? Yii::$app->request->post('StoreProductTranslation')['name']['ar'] : $translation_en->name;
                        $translation_ar->short = (Yii::$app->request->post('StoreProductTranslation')['short']['ar'] != '') ? Yii::$app->request->post('StoreProductTranslation')['short']['ar'] : $translation_en->short;
                        $translation_ar->description = (Yii::$app->request->post('StoreProductTranslation')['description']['ar'] != '') ? Yii::$app->request->post('StoreProductTranslation')['description']['ar'] : $translation_en->description;
                        $translation_ar->meta_title = (Yii::$app->request->post('StoreProductTranslation')['meta_title']['ar'] != '') ? Yii::$app->request->post('StoreProductTranslation')['meta_title']['ar'] : $translation_en->meta_title;
                        $translation_ar->meta_description = (Yii::$app->request->post('StoreProductTranslation')['meta_description']['ar'] != '') ? Yii::$app->request->post('StoreProductTranslation')['meta_description']['ar'] : $translation_en->meta_description;
                        $translation_ar->meta_keywords = (Yii::$app->request->post('StoreProductTranslation')['meta_keywords']['ar'] != '') ? Yii::$app->request->post('StoreProductTranslation')['meta_keywords']['ar'] : $translation_en->meta_keywords;
                        $translation_ar->locale = 'ar-AE';
                        $translation_ar->save();

                        $translation_ru->product_id = $model->id;
                        $translation_ru->name = (Yii::$app->request->post('StoreProductTranslation')['name']['ru'] != '') ? Yii::$app->request->post('StoreProductTranslation')['name']['ru'] : $translation_en->name;
                        $translation_ru->short = (Yii::$app->request->post('StoreProductTranslation')['short']['ru'] != '') ? Yii::$app->request->post('StoreProductTranslation')['short']['ru'] : $translation_en->short;
                        $translation_ru->description = (Yii::$app->request->post('StoreProductTranslation')['description']['ru'] != '') ? Yii::$app->request->post('StoreProductTranslation')['description']['ru'] : $translation_en->description;
                        $translation_ru->meta_title = (Yii::$app->request->post('StoreProductTranslation')['meta_title']['ru'] != '') ? Yii::$app->request->post('StoreProductTranslation')['meta_title']['ru'] : $translation_en->meta_title;
                        $translation_ru->meta_description = (Yii::$app->request->post('StoreProductTranslation')['meta_description']['ru'] != '') ? Yii::$app->request->post('StoreProductTranslation')['meta_description']['ru'] : $translation_en->meta_description;
                        $translation_ru->meta_keywords = (Yii::$app->request->post('StoreProductTranslation')['meta_keywords']['ru'] != '') ? Yii::$app->request->post('StoreProductTranslation')['meta_keywords']['ru'] : $translation_en->meta_keywords;
                        $translation_ru->locale = 'ru-RU';
                        $translation_ru->save();

                        $price = $product_data['price'] ? $product_data['price'] : 1;
                        $purchase_price = $price * (1 + ($model->user->commission->commission ? $model->user->commission->commission : 0) / 100);

                        $model->price = $price;
                        $model->purchase_price = $purchase_price;

                        $model->save();

                        $model->title = Helper::toSlug(mb_substr($product_data['description'], 0, '15')) . '-';
                        $model->slug = Helper::toSlug($translation_en->name) . '_' . $model->id;

                        $seller = SellerQuery::find()->where(['seller_id' => Yii::$app->user->identity->getId(), 'query_id' => $query_data['query_id']])->with('query')->one();
                        $seller->product_id = $model->id;
                        $seller->status = SellerQuery::STATUS_MODERATE;
                        $seller->save();

                        $get_prices = SellerQuery::find()->where(['query_id' => $query_data['query_id']])->andWhere(['not', ['product_id' => null]])->all();
                        $price_array = [];
                        $prices = [];
                        foreach ($get_prices as $get_price) {
                            $price_array[] += $get_price->productPrice->price;
                        }
                        sort($price_array);
                        $arrlength = count($price_array);
                        if ($arrlength > 3) $counter = 3;
                        else $counter = $arrlength;

                        if ($counter > 0) {
                            for ($x = 0; $x < $counter; $x++) {
                                $prices += [$x => $price_array[$x]];
                            }
                        } else {
                            $prices = null;
                        }

                        $image_array = [];
                        $all_images = StoreProductImage::find()->where(['product_id' => $model->id])->all();
                        foreach ($all_images as $all_image) {
                            $image_array += [$all_image->id => $all_image->link];
                        }

                        return $this->asJson([
                            'error' => false,
                            'status' => 'Request sent',
                            'product_id' => $model->id,
                            'image_array' => $image_array,
                            'prices' => $prices,
                            'images_json_array' => $images_json_array,
                        ]);
                    } else {
                        return $this->asJson(['error' => true, 'message' => 'Product already added']);
//                        return $this->redirect(['/user/requests']);
                    }
                } else {
                    return $this->asJson(['error' => true, 'message' => 'Query not found']);
//                return $this->redirect(['/user/requests']);
                }
            } else {
                return $this->asJson([
                    'error' => true,
                    'message' => 'Price does not exist'
                ]);

            }
        } else {
            return $this->asJson([
                'error' => true,
                'message' => 'Description does not exist'
            ]);
        }
    }

    public function actinEditProduct()
    {
        $post = Yii::$app->request->post();
        $product_data = $post['Product'];
        $query_data = $post['SellerQuery'];

        if ($product_data['description']) {
            if ($product_data['price']) {
                if (!(empty(SellerQuery::find()->where(['seller_id' => Yii::$app->user->identity->getId(), 'query_id' => $query_data['query_id'], 'product_id' => null])->one()))) {

                    $model = StoreProduct::find()->where(['id' => $product_data['product_id']])->one();

                    $image = UploadedFile::getInstanceByName('mainImage');
                    $dir = (__DIR__) . '/../../uploads/store-products/';

                    if ($image) {
                        $old_image = StoreProductImage::findOne(['main' => 1, 'product_id' => $model->id]);
                        if (!empty($old_image)) $old_image->delete();
                        $image_model = new StoreProductImage();
                        $image_model->product_id = $model->id;
                        $image_model->main = 1;
                        $path = $image->baseName . '.' . $image->extension;
                        if ($image->saveAs($dir . $path)) {
                            $resizer = new SimpleImage();
                            $resizer->load($dir . $path);
                            $resizer->resize(Yii::$app->params['imageSizes']['store-products']['image'][0], Yii::$app->params['imageSizes']['store-products']['image'][1]);
                            $image_name = uniqid() . '.' . $image->extension;
                            $resizer->save($dir . $image_name);
                            $image_model->link = '/uploads/store-products/' . $image_name;
                            if (file_exists($dir . $path)) unlink($dir . $path);

                            $image_model->save();

                        } else {
//                    Yii::$app->session->setFlash('error', FA::i('warning') . ' Ошибка, попробуйте позже.');
//                    return $this->goBack();
                            return $this->asJson('stat', 'error');
                        }
                    }
                    $images_json_array = [];
                    $images = UploadedFile::getInstancesByName('Query[images]');
                    if (!empty($images)) {
                        foreach ($images as $key => $image) {
                            $image_model = new StoreProductImage();
                            $image_model->product_id = $model->id;
                            $image_model->main = 0;
                            $path = $image->baseName . '.' . $image->extension;
                            if ($image->saveAs($dir . $path)) {
                                $resizer = new SimpleImage();
                                $resizer->load($dir . $path);
                                $resizer->resize(Yii::$app->params['imageSizes']['store-products']['image'][0], Yii::$app->params['imageSizes']['store-products']['image'][1]);
                                $image_name = uniqid() . '.' . $image->extension;
                                $resizer->save($dir . $image_name);
                                $image_model->link = '/uploads/store-products/' . $image_name;
                                if (file_exists($dir . $path)) unlink($dir . $path);

                                $image_model->save();
                                $images_json_array += [$key => $image_model->link];
                            } else {
                                Yii::$app->session->setFlash('error', FA::i('warning') . ' Ошибка, попробуйте позже.');
                                return $this->goBack();
                            }
                        }

                    }

                    $model->save();
                    $translation_en = StoreProductTranslation::findOne(['product_id' => $model->id, 'locale' => 'en-EN']);
                    $translation_ar = (!empty(StoreProductTranslation::findOne(['product_id' => $model->id, 'locale' => 'ar-AE']))) ? StoreProductTranslation::findOne(['product_id' => $model->id, 'locale' => 'ar-AE']) : new StoreProductTranslation();
                    $translation_ru = (!empty(StoreProductTranslation::findOne(['product_id' => $model->id, 'locale' => 'ru-RU']))) ? StoreProductTranslation::findOne(['product_id' => $model->id, 'locale' => 'ru-RU']) : new StoreProductTranslation();

                    $translation_en->product_id = $model->id;
                    $translation_en->name = $product_data['description'] ? mb_substr($product_data['description'], 0, 10) : '';
                    $translation_en->short = $product_data['description'] ? mb_substr($product_data['description'], 0, 20) : '';
                    $translation_en->description = $product_data['description'] ? $product_data['description'] : '';
                    $translation_en->meta_title = $product_data['description'] ? mb_substr($product_data['description'], 0, 10) : '';
                    $translation_en->meta_description = $product_data['description'] ? mb_substr($product_data['description'], 0, 20) : '';
                    $translation_en->meta_keywords = $product_data['description'] ? str_replace(' ', ',', $product_data['description']) : '';
                    $translation_en->locale = 'en-EN';
                    $translation_en->save();

                    $translation_ar->product_id = $model->id;
                    $translation_ar->name = (Yii::$app->request->post('StoreProductTranslation')['name']['ar'] != '') ? Yii::$app->request->post('StoreProductTranslation')['name']['ar'] : $translation_en->name;
                    $translation_ar->short = (Yii::$app->request->post('StoreProductTranslation')['short']['ar'] != '') ? Yii::$app->request->post('StoreProductTranslation')['short']['ar'] : $translation_en->short;
                    $translation_ar->description = (Yii::$app->request->post('StoreProductTranslation')['description']['ar'] != '') ? Yii::$app->request->post('StoreProductTranslation')['description']['ar'] : $translation_en->description;
                    $translation_ar->meta_title = (Yii::$app->request->post('StoreProductTranslation')['meta_title']['ar'] != '') ? Yii::$app->request->post('StoreProductTranslation')['meta_title']['ar'] : $translation_en->meta_title;
                    $translation_ar->meta_description = (Yii::$app->request->post('StoreProductTranslation')['meta_description']['ar'] != '') ? Yii::$app->request->post('StoreProductTranslation')['meta_description']['ar'] : $translation_en->meta_description;
                    $translation_ar->meta_keywords = (Yii::$app->request->post('StoreProductTranslation')['meta_keywords']['ar'] != '') ? Yii::$app->request->post('StoreProductTranslation')['meta_keywords']['ar'] : $translation_en->meta_keywords;
                    $translation_ar->locale = 'ar-AE';
                    $translation_ar->save();

                    $translation_ru->product_id = $model->id;
                    $translation_ru->name = (Yii::$app->request->post('StoreProductTranslation')['name']['ru'] != '') ? Yii::$app->request->post('StoreProductTranslation')['name']['ru'] : $translation_en->name;
                    $translation_ru->short = (Yii::$app->request->post('StoreProductTranslation')['short']['ru'] != '') ? Yii::$app->request->post('StoreProductTranslation')['short']['ru'] : $translation_en->short;
                    $translation_ru->description = (Yii::$app->request->post('StoreProductTranslation')['description']['ru'] != '') ? Yii::$app->request->post('StoreProductTranslation')['description']['ru'] : $translation_en->description;
                    $translation_ru->meta_title = (Yii::$app->request->post('StoreProductTranslation')['meta_title']['ru'] != '') ? Yii::$app->request->post('StoreProductTranslation')['meta_title']['ru'] : $translation_en->meta_title;
                    $translation_ru->meta_description = (Yii::$app->request->post('StoreProductTranslation')['meta_description']['ru'] != '') ? Yii::$app->request->post('StoreProductTranslation')['meta_description']['ru'] : $translation_en->meta_description;
                    $translation_ru->meta_keywords = (Yii::$app->request->post('StoreProductTranslation')['meta_keywords']['ru'] != '') ? Yii::$app->request->post('StoreProductTranslation')['meta_keywords']['ru'] : $translation_en->meta_keywords;
                    $translation_ru->locale = 'ru-RU';
                    $translation_ru->save();

                    $price = $product_data['price'] ? $product_data['price'] : 1;
                    $purchase_price = $price * (1 + ($model->user->commission->commission ? $model->user->commission->commission : 0) / 100);

                    $model->price = $price;
                    $model->purchase_price = $purchase_price;

                    $model->save();

                    $seller = SellerQuery::find()->where(['seller_id' => Yii::$app->user->identity->getId(), 'query_id' => $query_data['query_id']])->with('query')->one();
                    $seller->product_id = $model->id;
                    $seller->status = SellerQuery::STATUS_MODERATE;
                    $seller->save();

                    $get_prices = SellerQuery::find()->where(['query_id' => $query_data['query_id']])->andWhere(['not', ['product_id' => null]])->all();
                    $price_array = [];
                    $prices = [];
                    foreach ($get_prices as $get_price) {
                        $price_array[] += $get_price->productPrice->price;
                    }
                    sort($price_array);
                    $arrlength = count($price_array);
                    if ($arrlength > 3) $counter = 3;
                    else $counter = $arrlength;

                    if ($counter > 0) {
                        for ($x = 0; $x < $counter; $x++) {
                            $prices += [$x => $price_array[$x]];
                        }
                    } else {
                        $prices = null;
                    }

                    return json_encode([
                        'error' => false,
                        'status' => 'Request sent',
                        'prices' => $prices,
                        'post' => $post,
                        'images_json_array' => $images_json_array,
                        //            'product' => [
                        //                'page_title' => Yii::t('frontend', 'Product added to cart 1'),
                        //                'img' => $product->image,
                        //                'name' => $product->translate->name,
                        //                //                        'shop' => $product->shop->name,
                        //                'cat' => $product->category->translate->title,
                        //                'cart_count' => static::getCount(),
                        //            ],
                    ]);
                }
//            return $this->redirect(['/user/requests']);
            } else {
                return $this->asJson([
                    'error' => true,
                    'message' => 'Price does not exist'
                ]);

            }
        } else {
            return $this->asJson([
                'error' => true,
                'message' => 'Description does not exist'
            ]);
        }
    }

}
