<?php


namespace api\controllers;

use api\transformers\ProfileProductList;
use common\models\City;
use common\models\SellerQuery;
use common\models\Stock;
use common\models\StoreOrder;
use common\models\StoreOrderProduct;
use common\models\StoreProduct;
use common\models\User;
use api\models\ProfileForm;
use common\models\UserCart;
use common\models\UserCommission;
use Yii;
use yii\filters\auth\HttpBasicAuth;
use yii\web\UploadedFile;

class OrderController extends \yii\web\Controller
{
    public $enableCsrfValidation = false;

    public function beforeAction($action)
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        return [
//            'authenticator' => [
//                'class' => HttpBasicAuth::className(),
//                'auth' => function ($email, $password) {
//                    $user = User::findByEmail($email);
//                    if (!$user) return null;
//                    $check = $user->validatePassword($password);
//                    return $check ? $user: null;
//                }
//            ]
//            'verbs' => [
//                'class' => VerbFilter::className(),
//                'actions' => [
//                    'purchase-delete' => ['post'],
//                ],
//            ],
        ];
    }

    public function actionMake()
    {
        $data = Yii::$app->request->post();
        $products = $data['CartProduct'];
        $city = City::find()->where(['id' => $data['City']])->one();
        $user = $data['User'];
        $delivery = $data['Delivery'];
//        $city = $data['Location'];
        $totalCount = $data['TotalCount'];

        if(!empty($data['User'])) {
            if(!$this->checkUser($data['User'])) return $this->redirect(['cart/index']);
            if(!Yii::$app->user->id) {
                if(empty($user = User::findByUsername($data['User']['username']))) {
                    $password = mt_rand(10000000, 99999999);
                    $user = new User();
                    $user->username = $data['User']['username']; //$this->username;
                    $user->email = $data['User']['email'];
                    $user->phone = $data['User']['phone'];
                    $user->status = User::STATUS_INACTIVE;

                    $user->setPassword($password);
                    $user->generateAuthKey();
                    if($user->save()) {

                        $user_commission = new UserCommission();
                        $user_commission->id = $user->id;
                        $user_commission->commission = 35;
                        $user_commission->save();

                        Yii::$app
                            ->mailer
                            ->compose(
                                ['html' => 'signUp-html', 'text' => 'signUp-text'],
                                ['user' => $user, 'password' => $password]
                            )
                            ->setFrom([Yii::$app->params['supportEmail'] => Yii::$app->params['appName'] . ' robot'])
                            ->setTo($user->email)
                            ->setSubject('Registration on ' . Yii::$app->params['appName'])
                            ->send();
                    }
                }
            }
            else {
                $user = User::findOne(Yii::$app->user->id);
            }

            $user->phone = $user->phone ? $user->phone : $data['User']['phone'];

            if(empty($user)) return $this->redirect(['cart/index']);

            $order = new StoreOrder();
            $order->user_id = $user->id;
            $order->delivery_id = null;
            $order->status = StoreOrder::STATUS_NEW;
            $order->paid = StoreOrder::NOT_PAID;
            $order->total_price = $totalCount;
            $order->name = $data['User']['username'] ? $data['User']['username'] : $user->username;
            $order->email = $data['User']['email'] ? $data['User']['email'] : $user->email;
            $order->phone = $data['User']['phone'] ? $data['User']['phone'] : $user->phone;
//            $order->comment = $data['User']['comment'] ? $data['User']['comment'] : null;
            $order->city = $data['Location'] ? $data['Location'] : $city->name.' ('. $data['Stock'].')';

            if($order->save()) {
                Yii::$app
                    ->mailer
                    ->compose(
                        ['html' => 'makeOrder-html', 'text' => 'makeOrder-text'],
                        ['type' => 'buyer']
                    )
                    ->setFrom([Yii::$app->params['supportEmail'] => Yii::$app->params['appName'] . ' robot'])
                    ->setTo($data['User']['email'])
                    ->setSubject(Yii::$app->params['appName'])
                    ->send();
                Yii::$app
                    ->mailer
                    ->compose(
                        ['html' => 'makeOrder-html', 'text' => 'makeOrder-text'],
                        ['type' => 'seller']
                    )
                    ->setFrom([Yii::$app->params['supportEmail'] => Yii::$app->params['appName'] . ' robot'])
                    ->setTo(Yii::$app->params['adminEmail'])
                    ->setSubject(Yii::$app->params['appName'])
                    ->send();

                foreach ($products as $product) {
                    $orderProduct = new StoreOrderProduct();
                    $orderProduct->order_id = $order->id;
                    $orderProduct->product_id = $product['product_id'];
                    $orderProduct->product_name = $product['name'];
                    $orderProduct->price = $product['price'];
                    $orderProduct->quantity = $product['count'];
                    $orderProduct->sku = $product['sku'];
                    $orderProduct->save();

                    $sellerQuery = SellerQuery::find()->where(['product_id'=>$orderProduct->product_id])->one();
                    $sellerQuery->status = SellerQuery::STATUS_PURCHASED;
                    if($sellerQuery->save()) {

                        Yii::$app
                            ->mailer
                            ->compose(
                                ['html' => 'buyProduct-html', 'text' => 'buyProduct-text'],
                                [
                                    'type' => 'seller',
                                    'seller_name' => $sellerQuery->seller->username,
                                    'product_name' => $sellerQuery->query->vendor.' '.$sellerQuery->query->car.' '.$sellerQuery->query->modification.' '.$sellerQuery->query->year.' ('.$sellerQuery->product->translate->description.') ',
                                    'product_price' => $sellerQuery->product->price,
                                    'sale_date' => date('m/d/Y', $sellerQuery->updated_at),
                                ]
                            )
                            ->setFrom([Yii::$app->params['supportEmail'] => Yii::$app->params['appName'] . ' robot'])
                            ->setTo($sellerQuery->seller->email)
                            ->setSubject('Your product sold on ' . Yii::$app->name)
                            ->send();

                        $store_product = StoreProduct::find()->where(['id'=>$product['product_id']])->one();
                        $store_product->status = 0;
                        $store_product->save();
                    }
                }
                if(Yii::$app->user->id) {
                    UserCart::deleteAll(['user_id' => Yii::$app->user->id]);
                }
            } else {
//                print_r($order->getFirstErrors());
                return $this->asJson(['error'=>1,'message'=>'Not checkout']);
            }
            return $this->asJson(['message'=>'Make order']);
        }
        return $this->asJson(['error'=>1,'message'=>'User data is empty']);
    }

    public function actionGetCities()
    {
        $cities = City::findAll(['status'=>1]);
        if ($cities) {
            return $this->asJson(['cities'=>$cities]);
        }
        return $this->asJson(['message'=>'There are not cities']);

    }

    public function actionGetStocks($id)
    {
        $stocks = Stock::findAll(['city_id'=>$id]);
        if($stocks) {
            return $this->asJson(['stocks'=>$stocks]);
        }
        return $this->asJson(['message'=>'There are not stocks']);
    }


}